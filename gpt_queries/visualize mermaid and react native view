Can is Amplify GraphQL model be used to write a react native typescript view that will read data in the project's DynamoDB database using Amplify's DataStore based upon the Resume model that will load and display all of the data's hierarchy in React Native to represent an outline in a series of Views that respect indentation in their styles to add proper indentation. If there are shared relationships, duplicate the View in their parent node but display them based on their hierarchy styling and indentation. The data should begin with a single root Resume and populate mock data with their proper relationships such as foreign keys, thus they should be styled by both font and background color. Relationships should represent their foreign keys in a color theory that follows that uses relationship as the basis of base color and the subsequent hue and saturation of the background color of the entities themselves as well as the background color of the individual properties that are displayed: One to one relationships create a single record. One to many relationships should create multiple child records given the parent's relationship. Many to Many should create records per their parent record. This representation should be presented as both a React Native View as a component that will be used under a currently running App.tsx file in the typescript .tsx component that can be independently nested as well as a Mermaid .mmd file. The amplify project already had an api and use yarn as the package manager for dependencies. Do not make an App.tsx
The GraphQL schema is:
input AMPLIFY {
globalAuthRule: AuthRule = {allow: public}
}

type Reference @model @auth(rules: [{allow: public}]) {
id: ID!
name: String
phone: String
email: String
contactinformationID: ID! @index(name: "byContactInformation")
}

type ContactInformation @model @auth(rules: [{allow: public}]) {
id: ID!
name: String
email: String
phone: String
References: [Reference] @hasMany(indexName: "byContactInformation", fields: ["id"])
}

type Resume @model @auth(rules: [{allow: public}]) {
id: ID!
Summary: Summary @hasOne
Skills: [Skill] @hasMany(indexName: "byResume", fields: ["id"])
Education: Education @hasOne
Experience: Experience @hasOne
ContactInformation: ContactInformation @hasOne
title: String
}

type Education @model @auth(rules: [{allow: public}]) {
id: ID!
summary: String
Schools: [School] @hasMany(indexName: "byEducation", fields: ["id"])
}

type Degree @model @auth(rules: [{allow: public}]) {
id: ID!
major: String
startYear: AWSDate
endYear: AWSDate
schoolID: ID @index(name: "bySchool")
School: School @belongsTo(fields: ["schoolID"])
}

type Company @model @auth(rules: [{allow: public}]) {
id: ID!
name: String
role: String
startDate: AWSDate
endDate: AWSDate
historyID: ID @index(name: "byExperience")
Engagements: [Engagement] @hasMany(indexName: "byCompany", fields: ["id"])
Accomplishments: [Accomplishment] @hasMany(indexName: "byCompany", fields: ["id"])
Skills: [Skill] @hasMany(indexName: "byCompany", fields: ["id"])
title: String
gptResponse: String
}

type Accomplishment @model @auth(rules: [{allow: public}]) {
id: ID!
title: String
description: String
link: String
engagementID: ID @index(name: "byEngagement")
companyID: ID @index(name: "byCompany")
Skills: [Skill] @hasMany(indexName: "byAccomplishment", fields: ["id"])
}

type School @model @auth(rules: [{allow: public}]) {
id: ID!
name: String
Degrees: [Degree] @hasMany(indexName: "bySchool", fields: ["id"])
educationID: ID @index(name: "byEducation")
}

type Experience @model @auth(rules: [{allow: public}]) {
id: ID!
title: String
text: String
Companies: [Company] @hasMany(indexName: "byExperience", fields: ["id"])
gptResponse: String
}

type Skill @model @auth(rules: [{allow: public}]) {
id: ID!
title: String
link: String
resumeID: ID @index(name: "byResume")
companyID: ID @index(name: "byCompany")
accomplishmentID: ID @index(name: "byAccomplishment")
}

type Engagement @model @auth(rules: [{allow: public}]) {
id: ID!
client: String
startDate: AWSDate
endDate: AWSDate
companyID: ID @index(name: "byCompany")
Accomplishments: [Accomplishment] @hasMany(indexName: "byEngagement", fields: ["id"])
gptResponse: String
}

type Summary @model @auth(rules: [{allow: public}]) {
id: ID!
goals: String
persona: String
url: String
headshot: String
gptResponse: String
}

yarn add aws-amplify aws-amplify-react-native @aws-amplify/datastore

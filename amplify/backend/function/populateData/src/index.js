const { DataStore, initSchema, AuthModeStrategyType } = require("@aws-amplify/datastore")
const Amplify = require("@aws-amplify/core").default
const { schema } = require("./models/schema")
const models = initSchema(schema)

const {
  Reference,
  ContactInformation,
  Resume,
  Education,
  Degree,
  Company,
  Accomplishment,
  School,
  Experience,
  Skill,
  Engagement,
  Summary,
} = models

// Load environment variables in non-production environments
if (process.env.NODE_ENV !== "production") {
  require("dotenv").config()
}

// Amplify configuration
const awsconfig = {
  aws_project_region: process.env.REGION,
  aws_cognito_identity_pool_id: process.env.IDENTITY_POOL_ID,
  aws_cognito_region: process.env.REGION,
  aws_user_pools_id: process.env.USER_POOL_ID,
  aws_user_pools_web_client_id: process.env.USER_POOL_WEB_CLIENT_ID,
  aws_appsync_graphqlEndpoint: process.env.GRAPHQL_ENDPOINT,
  aws_appsync_region: process.env.REGION,
  aws_appsync_authenticationType: "API_KEY",
  aws_appsync_apiKey: process.env.API_KEY,
  DataStore: {
    authModeStrategyType: AuthModeStrategyType.MULTI_AUTH,
    maxRecordsToSync: 10000,
    syncPageSize: 1000,
  },
}

Amplify.configure(awsconfig)

// Utility function to convert a date string to AWSDate format
function AWSDateConverter(dateString) {
  const date = new Date(dateString)
  const year = date.getFullYear()
  const month = `0${date.getMonth() + 1}`.slice(-2)
  const day = `0${date.getDate()}`.slice(-2)
  return `${year}-${month}-${day}`
}

DataStore.observe(Skill).subscribe((msg) => console.log("DataStore observe message:", msg))

// Function to clear the database
async function clearDatabase() {
  const models = [
    Reference,
    ContactInformation,
    Resume,
    Education,
    Degree,
    Company,
    Accomplishment,
    School,
    Experience,
    Skill,
    Engagement,
    Summary,
  ]

  for (const model of models) {
    const records = await DataStore.query(model)
    for (const record of records) {
      await DataStore.delete(record)
    }
  }
}

// Lambda handler
exports.handler = async (event) => {
  try {
    // Clear the existing data in the database
    await clearDatabase()

    // Create a Resume
    const resume = await DataStore.save(
      new Resume({
        title: "Sample Resume",
      }),
    )

    // Create related data
    const summary = await DataStore.save(
      new Summary({
        goals: "Become a software developer",
        persona: "Hardworking and dedicated",
        url: "http://example.com",
        headshot: "http://example.com/headshot.jpg",
        gptResponse: "Generated by GPT",
        resumeID: resume.id,
      }),
    )

    const contactInfo = await DataStore.save(
      new ContactInformation({
        name: "John Doe",
        email: "john.doe@example.com",
        phone: "123-456-7890",
      }),
    )

    // Create 3 References for the ContactInformation
    for (let i = 0; i < 3; i++) {
      await DataStore.save(
        new Reference({
          name: `Reference ${i + 1}`,
          phone: `123-456-789${i}`,
          email: `reference${i + 1}@example.com`,
          contactInformationID: contactInfo.id,
        }),
      )
    }

    const education = await DataStore.save(
      new Education({
        summary: "Education Summary",
      }),
    )

    // Create 3 Schools for the Education
    for (let i = 0; i < 3; i++) {
      const school = await DataStore.save(
        new School({
          name: `School ${i + 1}`,
          educationID: education.id,
        }),
      )

      // Create 3 Degrees for each School
      for (let j = 0; j < 3; j++) {
        await DataStore.save(
          new Degree({
            major: `Major ${j + 1}`,
            startYear: AWSDateConverter(`${new Date().getFullYear() - j}-01-01`), // Convert to AWSDate
            endYear: AWSDateConverter(`${new Date().getFullYear() - j + 4}-01-01`), // Convert to AWSDate
            schoolID: school.id,
          }),
        )
      }
    }

    const experience = await DataStore.save(
      new Experience({
        title: "Experience Title",
        text: "Experience Description",
        gptResponse: "Generated by GPT",
      }),
    )

    // Create 3 Companies for the Experience
    for (let i = 0; i < 3; i++) {
      const company = await DataStore.save(
        new Company({
          name: `Company ${i + 1}`,
          role: `Role ${i + 1}`,
          startDate: AWSDateConverter(new Date().toISOString()), // Convert to AWSDate
          endDate: AWSDateConverter(new Date().toISOString()), // Convert to AWSDate
          historyID: experience.id,
          title: `Title ${i + 1}`,
          gptResponse: "Generated by GPT",
        }),
      )

      // Create 3 Engagements for each Company
      for (let j = 0; j < 3; j++) {
        await DataStore.save(
          new Engagement({
            client: `Client ${j + 1}`,
            startDate: AWSDateConverter(new Date().toISOString()), // Convert to AWSDate
            endDate: AWSDateConverter(new Date().toISOString()), // Convert to AWSDate
            companyID: company.id,
            gptResponse: "Generated by GPT",
          }),
        )
      }

      // Create 3 Accomplishments for each Company
      for (let j = 0; j < 3; j++) {
        await DataStore.save(
          new Accomplishment({
            title: `Accomplishment ${j + 1}`,
            description: "Accomplishment Description",
            link: "http://example.com",
            companyID: company.id,
            engagementID: null, // Assuming no engagement for this example
          }),
        )
      }

      // Create 3 Skills for each Company
      for (let j = 0; j < 3; j++) {
        await DataStore.save(
          new Skill({
            title: `Skill ${j + 1}`,
            link: "http://example.com",
            companyID: company.id,
            resumeID: resume.id,
            accomplishmentID: null, // Assuming no accomplishment for this example
          }),
        )
      }
    }

    // Create 3 Skills for the Resume
    for (let i = 0; i < 3; i++) {
      await DataStore.save(
        new Skill({
          title: `Resume Skill ${i + 1}`,
          link: "http://example.com",
          resumeID: resume.id,
        }),
      )
    }

    return {
      statusCode: 200,
      body: JSON.stringify({
        message: "Data reset and populated successfully",
        resume: JSON.stringify(resume, null, 2),
      }),
    }
  } catch (error) {
    console.error("Error resetting and populating data:", error)
    return {
      statusCode: 500,
      body: JSON.stringify({
        message: "Error resetting and populating data",
        error: error.message,
      }),
    }
  }
}

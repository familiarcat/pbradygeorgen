import { DataStore, MutableModel } from "@aws-amplify/datastore"
import {
  Resume,
  Summary,
  Skill,
  Education,
  Experience,
  ContactInformation,
  Reference,
  School,
  Degree,
  Company,
  Engagement,
  Accomplishment,
  LazyResume,
} from "../../models"

// Function to create mock data
const createMockData = async () => {
  try {
    // Create Contact Information
    const contactInfo = await DataStore.save(
      new ContactInformation({
        name: "John Doe",
        email: "john.doe@example.com",
        phone: "123-456-7890",
      }),
    )

    // Create References linked to Contact Information
    await Promise.all(
      ["Jane Smith", "Robert Brown", "Emily White"].map((name, index) =>
        DataStore.save(
          new Reference({
            name,
            phone: `123-456-789${index}`,
            email: `${name.toLowerCase().replace(" ", ".")}@example.com`,
            contactinformationID: contactInfo.id, // Correctly set the foreign key
          }),
        ),
      ),
    )

    // Create Resume
    const resume = await DataStore.save(
      new Resume({
        title: "Sample Resume",
      }),
    )

    // Create Summary linked to Resume
    const summary = await DataStore.save(
      new Summary({
        goals: "Become a software developer",
        persona: "Hardworking and dedicated",
        url: "http://example.com",
        headshot: "http://example.com/headshot.jpg",
        gptResponse: "Generated by GPT",
        summaryResumeId: resume.id, // Use the foreign key to link
      }),
    )

    // Update Resume with linked Contact Information and Summary
    await DataStore.save(
      Resume.copyOf(resume, (draft: MutableModel<LazyResume>) => {
        // Ensure proper type handling by declaring draft parameter type
        draft.resumeContactInformationId = contactInfo.id // Link ContactInformation
        draft.resumeSummaryId = summary.id // Link Summary
      }),
    )

    // Create Skills linked to Resume
    await Promise.all(
      ["JavaScript", "React Native", "AWS"].map((title) =>
        DataStore.save(
          new Skill({
            title,
            link: `http://example.com/${title.toLowerCase()}`,
            resumeID: resume.id, // Correctly set the foreign key
          }),
        ),
      ),
    )

    // Create Education linked to Resume
    const education = await DataStore.save(
      new Education({
        summary: "Bachelor of Science in Computer Science",
        educationResumeId: resume.id, // Use the foreign key to link
      }),
    )

    // Create Schools linked to Education
    const schools = await Promise.all(
      ["MIT", "Stanford", "Harvard"].map((name) =>
        DataStore.save(
          new School({
            name,
            educationID: education.id, // Correctly set the foreign key
          }),
        ),
      ),
    )

    // Create Degrees linked to Schools
    await Promise.all(
      schools.map((school: { id: any }, index: number) =>
        DataStore.save(
          new Degree({
            major: `Major ${index + 1}`,
            startYear: (new Date().getFullYear() - 4 - index).toString(), // Ensure year is a string
            endYear: (new Date().getFullYear() - index).toString(), // Ensure year is a string
            schoolID: school.id, // Link directly to School
          }),
        ),
      ),
    )

    // Create Experience linked to Resume
    const experience = await DataStore.save(
      new Experience({
        title: "Software Developer",
        text: "Developed mobile applications",
        gptResponse: "Generated by GPT",
        experienceResumeId: resume.id, // Use the foreign key to link
      }),
    )

    // Create Companies linked to Experience
    const companies = await Promise.all(
      ["Google", "Amazon", "Facebook"].map((name) =>
        DataStore.save(
          new Company({
            name,
            role: "Developer",
            startDate: new Date().toISOString().split("T")[0], // Use only date string
            endDate: new Date().toISOString().split("T")[0], // Use only date string
            historyID: experience.id, // Link to Experience
            title: "Software Engineer",
            gptResponse: "Generated by GPT",
          }),
        ),
      ),
    )

    // Create Engagements and Accomplishments linked to Companies
    for (const company of companies) {
      const engagements = await Promise.all(
        [1, 2, 3].map((i) =>
          DataStore.save(
            new Engagement({
              client: `Client ${i}`,
              startDate: new Date().toISOString().split("T")[0],
              endDate: new Date().toISOString().split("T")[0],
              companyID: company.id, // Link to Company
              gptResponse: "Generated by GPT",
            }),
          ),
        ),
      )

      // Create Accomplishments linked to Engagements
      for (const engagement of engagements) {
        await Promise.all(
          [1, 2, 3].map((i) =>
            DataStore.save(
              new Accomplishment({
                title: `Engagement Accomplishment ${i}`,
                description: "Accomplishment Description",
                link: "http://example.com",
                companyID: company.id, // Link to Company
                engagementID: engagement.id, // Link to Engagement
              }),
            ),
          ),
        )
      }

      // Create Company-level Accomplishments
      await Promise.all(
        [1, 2, 3].map((i) =>
          DataStore.save(
            new Accomplishment({
              title: `Company Accomplishment ${i}`,
              description: "Accomplishment Description",
              link: "http://example.com",
              companyID: company.id, // Link to Company
              engagementID: null,
            }),
          ),
        ),
      )
    }

    console.log("Mock data created successfully")
  } catch (error) {
    console.error("Error creating mock data:", error)
  }
}

// Call createMockData to populate DataStore with mock data
createMockData().catch((error) => console.error("Error creating mock data:", error))

export default createMockData

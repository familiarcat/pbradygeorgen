'use client';

import React, { useState, useEffect } from 'react';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { tomorrow } from 'react-syntax-highlighter/dist/esm/styles/prism';
import Link from 'next/link';

/**
 * Download Functionality Test Report Page
 *
 * This page displays a report of the download functionality test results,
 * including previews of the various download formats.
 *
 * Philosophical Framework:
 * - Salinger: Simplifying the interface to focus on content
 * - Hesse: Balancing structure (test report) with flexibility (preview options)
 * - Derrida: Deconstructing the download formats
 * - Dante: Guiding the user through the download options
 */
export default function DownloadTestPage() {
  const [testReport, setTestReport] = useState(null);
  const [previewContent, setPreviewContent] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [activeTab, setActiveTab] = useState('report');
  const [activePreviewTab, setActivePreviewTab] = useState('text');

  useEffect(() => {
    const fetchTestReport = async () => {
      try {
        setLoading(true);

        // Fetch the test report
        const reportResponse = await fetch('/download_test_report.json');

        if (!reportResponse.ok) {
          throw new Error(`Failed to fetch test report: ${reportResponse.status} ${reportResponse.statusText}`);
        }

        const reportData = await reportResponse.json();
        setTestReport(reportData);

        // Fetch the preview content
        const previewResponse = await fetch('/downloads/preview_content.json');

        if (!previewResponse.ok) {
          throw new Error(`Failed to fetch preview content: ${previewResponse.status} ${previewResponse.statusText}`);
        }

        const previewData = await previewResponse.json();
        setPreviewContent(previewData);

        setLoading(false);
      } catch (err) {
        console.error('Error fetching test report:', err);
        setError(err instanceof Error ? err.message : 'Unknown error');
        setLoading(false);
      }
    };

    fetchTestReport();
  }, []);

  // Loading state
  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 p-8">
        <div className="max-w-7xl mx-auto">
          <h1 className="text-3xl font-bold mb-8">Download Functionality Test Report</h1>
          <div className="bg-white shadow rounded-lg p-8">
            <div className="flex justify-center items-center h-64">
              <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
              <span className="ml-4 text-gray-600">Loading report data...</span>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // Error state
  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 p-8">
        <div className="max-w-7xl mx-auto">
          <h1 className="text-3xl font-bold mb-8">Download Functionality Test Report</h1>
          <div className="bg-white shadow rounded-lg p-8">
            <div className="bg-red-100 border border-red-400 text-red-700 p-4 rounded">
              <strong className="font-bold">Error: </strong>
              <span>{error}</span>
            </div>
            <button
              onClick={() => window.location.reload()}
              className="mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
            >
              Refresh Page
            </button>
          </div>
        </div>
      </div>
    );
  }

  // Main content
  return (
    <div className="flex flex-col min-h-screen bg-gray-50">
      {/* Fixed header */}
      <header className="bg-white border-b border-gray-200 shadow-sm py-4 px-4 sm:px-6 lg:px-8">
        <div className="max-w-7xl mx-auto">
          <div className="flex flex-col md:flex-row justify-between items-start md:items-center">
            <h1 className="text-2xl font-bold text-gray-900">Download Functionality Test Report</h1>

            {/* Quick links for better accessibility */}
            <div className="mt-2 md:mt-0 flex flex-wrap gap-2">
              <button
                className="text-sm text-blue-600 hover:text-blue-800 bg-blue-50 px-3 py-1 rounded-full"
                onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}
              >
                ↑ Top
              </button>
              <button
                className="text-sm text-blue-600 hover:text-blue-800 bg-blue-50 px-3 py-1 rounded-full"
                onClick={() => window.scrollTo({ top: document.body.scrollHeight, behavior: 'smooth' })}
              >
                ↓ Bottom
              </button>
            </div>
          </div>
        </div>
      </header>

      {/* Tab navigation */}
      <div className="bg-white border-b border-gray-200 shadow-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <nav className="flex overflow-x-auto">
            <button
              className={`px-4 md:px-6 py-3 border-b-2 font-medium text-sm whitespace-nowrap ${
                activeTab === 'report'
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
              onClick={() => setActiveTab('report')}
            >
              Test Report
            </button>
            <button
              className={`px-4 md:px-6 py-3 border-b-2 font-medium text-sm whitespace-nowrap ${
                activeTab === 'preview'
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
              onClick={() => setActiveTab('preview')}
            >
              Content Preview
            </button>
            <button
              className={`px-4 md:px-6 py-3 border-b-2 font-medium text-sm whitespace-nowrap ${
                activeTab === 'download'
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
              onClick={() => setActiveTab('download')}
            >
              Download Links
            </button>
          </nav>
        </div>
      </div>

      {/* Main scrollable content area */}
      <div className="flex-1 overflow-auto py-6 px-4 sm:px-6 lg:px-8">
        <div className="max-w-7xl mx-auto">
          <div className="bg-white shadow rounded-lg p-6">
          {activeTab === 'report' && testReport && (
            <div>
              <h2 className="text-2xl font-bold mb-4">Test Report</h2>
              <p className="mb-4">Report generated at: {new Date(testReport.timestamp).toLocaleString()}</p>

              {/* Simple report summary */}
              <div className="bg-gray-100 p-4 rounded mb-4">
                <h3 className="text-lg font-semibold mb-2">Summary</h3>
                <ul className="list-disc pl-5">
                  <li>All formats available: {testReport.tests?.allFormatsAvailable ? 'Yes' : 'No'}</li>
                  <li>Format count: {testReport.tests?.formatCount}</li>
                  <li>Total size: {testReport.tests?.totalSize} bytes</li>
                </ul>
              </div>
            </div>
          )}

          {activeTab === 'preview' && previewContent && (
            <div>
              <h2 className="text-2xl font-bold mb-4">Content Preview</h2>

              {/* Preview tabs */}
              <div className="border-b border-gray-200 mb-4">
                <nav className="flex -mb-px">
                  <button
                    className={`mr-6 py-2 border-b-2 font-medium text-sm ${
                      activePreviewTab === 'text'
                        ? 'border-blue-500 text-blue-600'
                        : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                    }`}
                    onClick={() => setActivePreviewTab('text')}
                  >
                    Text
                  </button>
                  <button
                    className={`mr-6 py-2 border-b-2 font-medium text-sm ${
                      activePreviewTab === 'markdown'
                        ? 'border-blue-500 text-blue-600'
                        : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                    }`}
                    onClick={() => setActivePreviewTab('markdown')}
                  >
                    Markdown
                  </button>
                  <button
                    className={`mr-6 py-2 border-b-2 font-medium text-sm ${
                      activePreviewTab === 'json'
                        ? 'border-blue-500 text-blue-600'
                        : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                    }`}
                    onClick={() => setActivePreviewTab('json')}
                  >
                    JSON
                  </button>
                </nav>
              </div>

              {/* Preview content */}
              <div className="bg-gray-100 p-4 rounded">
                <div className="overflow-auto" style={{ maxHeight: '60vh', WebkitOverflowScrolling: 'touch' }}>
                  {activePreviewTab === 'text' && (
                    <pre className="whitespace-pre-wrap">{previewContent.formats?.text}</pre>
                  )}

                  {activePreviewTab === 'markdown' && (
                    <SyntaxHighlighter language="markdown" style={tomorrow}>
                      {previewContent.formats?.markdown}
                    </SyntaxHighlighter>
                  )}

                  {activePreviewTab === 'json' && (
                    <SyntaxHighlighter language="json" style={tomorrow}>
                      {previewContent.formats?.json}
                    </SyntaxHighlighter>
                  )}
                </div>
              </div>
            </div>
          )}

          {activeTab === 'download' && testReport && (
            <div>
              <h2 className="text-2xl font-bold mb-4">Download Links</h2>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {testReport.formats?.text?.available && (
                  <div className="bg-gray-100 p-4 rounded">
                    <h3 className="text-lg font-semibold mb-2">Text Format</h3>
                    <p className="mb-4">Size: {testReport.formats.text.size} bytes</p>
                    <Link
                      href={testReport.formats.text.path}
                      className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
                      target="_blank"
                    >
                      Download Text
                    </Link>
                  </div>
                )}

                {testReport.formats?.markdown?.available && (
                  <div className="bg-gray-100 p-4 rounded">
                    <h3 className="text-lg font-semibold mb-2">Markdown Format</h3>
                    <p className="mb-4">Size: {testReport.formats.markdown.size} bytes</p>
                    <Link
                      href={testReport.formats.markdown.path}
                      className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
                      target="_blank"
                    >
                      Download Markdown
                    </Link>
                  </div>
                )}

                {testReport.formats?.json?.available && (
                  <div className="bg-gray-100 p-4 rounded">
                    <h3 className="text-lg font-semibold mb-2">JSON Format</h3>
                    <p className="mb-4">Size: {testReport.formats.json.size} bytes</p>
                    <Link
                      href={testReport.formats.json.path}
                      className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
                      target="_blank"
                    >
                      Download JSON
                    </Link>
                  </div>
                )}
              </div>
            </div>
          )}
        </div>

        {/* Footer with navigation links */}
        <div id="bottom" className="mt-8 mb-4 flex justify-between items-center">
          <div className="text-sm text-gray-500">
            <p>Download Functionality Test Report</p>
            <p>Generated with the Salinger philosophy of information transparency</p>
          </div>
          <div className="flex gap-2">
            <button
              className="text-sm text-blue-600 hover:text-blue-800 bg-blue-50 px-3 py-1 rounded-full"
              onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}
            >
              ↑ Back to Top
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}

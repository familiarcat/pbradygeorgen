exports.id=831,exports.ids=[831],exports.modules={5464:(e,r,t)=>{"use strict";t.d(r,{v:()=>o});var n=t(9369);let o={ai:{start:e=>{console.log(`🧠🔍 [Hesse:AI:Start] ${e}`),n.x.success.basic(`AI operation started: ${e}`)},progress:e=>{console.log(`🧠⏳ [Hesse:AI:Progress] ${e}`)},success:e=>{console.log(`🧠✅ [Hesse:AI:Success] ${e}`),n.x.success.core(`AI operation succeeded: ${e}`)},warning:e=>{console.warn(`🧠⚠️ [Hesse:AI:Warning] ${e}`),n.x.warn.performance(`AI operation warning: ${e}`)},error:e=>{console.error(`🧠❌ [Hesse:AI:Error] ${e}`),n.x.error.runtime(`AI operation failed: ${e}`)},metrics:e=>{console.log(`🧠📊 [Hesse:AI:Metrics] ${e}`)}},cache:{hit:e=>{console.log(`📦✅ [Derrida:Cache:Hit] ${e}`)},miss:e=>{console.log(`📦❌ [Derrida:Cache:Miss] ${e}`)},update:e=>{console.log(`📦🔄 [Derrida:Cache:Update] ${e}`)},invalidate:e=>{console.log(`📦🗑️ [Derrida:Cache:Invalidate] ${e}`)}},openai:{request:e=>{console.log(`🤖🔍 [Hesse:OpenAI:Request] ${e}`),n.x.success.basic(`OpenAI request: ${e}`)},response:e=>{console.log(`🤖✅ [Hesse:OpenAI:Response] ${e}`),n.x.success.core(`OpenAI response received: ${e}`)},error:e=>{console.error(`🤖❌ [Hesse:OpenAI:Error] ${e}`),n.x.error.runtime(`OpenAI error: ${e}`)},rateLimit:e=>{console.warn(`🤖⏱️ [Hesse:OpenAI:RateLimit] ${e}`),n.x.warn.performance(`OpenAI rate limit: ${e}`)},tokens:e=>{console.log(`🤖💰 [Hesse:OpenAI:Tokens] ${e}`)}},summary:{start:e=>{console.log(`📝🔍 [Hesse:Summary:Start] ${e}`),n.x.success.basic(`Summary generation started: ${e}`)},progress:e=>{console.log(`📝⏳ [Hesse:Summary:Progress] ${e}`)},complete:e=>{console.log(`📝✅ [Hesse:Summary:Complete] ${e}`),n.x.success.core(`Summary generation completed: ${e}`)},error:e=>{console.error(`📝❌ [Hesse:Summary:Error] ${e}`),n.x.error.runtime(`Summary generation failed: ${e}`)}}}},6487:()=>{},8335:()=>{},9369:(e,r,t)=>{"use strict";t.d(r,{x:()=>f});let n={enabledRealms:{inferno:!0,purgatorio:!0,paradiso:!0},minimumLevels:{inferno:1,purgatorio:1,paradiso:1},formatting:{includeTimestamp:!0,includeEmoji:!0,colorize:!0,includeRealmName:!0,includeLevelNumber:!0,includeCategoryName:!0},environments:{development:{enabled:!0},production:{enabled:!0,minimumLevels:{inferno:1,purgatorio:3,paradiso:4}},test:{enabled:!1}},platforms:{browser:{enabled:!0,colorize:!0},node:{enabled:!0,colorize:!0},terminal:{enabled:!0,colorize:!0},deployment:{enabled:!0,colorize:!1}},handlers:{}},o="undefined"!=typeof process&&process.env?"production":"development",s="undefined"!=typeof process&&process.versions&&process.versions.node?"node":"terminal",i={1:{name:"Limbo",emoji:"\uD83D\uDC51\uD83D\uDD25",description:"Validation errors"},2:{name:"Lust",emoji:"\uD83D\uDC51\uD83C\uDF0A",description:"Data flow errors"},3:{name:"Gluttony",emoji:"\uD83D\uDC51\uD83C\uDF7F",description:"Resource consumption errors"},4:{name:"Greed",emoji:"\uD83D\uDC51\uD83D\uDCB0",description:"Storage/caching errors"},5:{name:"Wrath",emoji:"\uD83D\uDC51\uD83D\uDCA2",description:"Runtime exceptions"},6:{name:"Heresy",emoji:"\uD83D\uDC51\uD83D\uDD25",description:"Configuration errors"},7:{name:"Violence",emoji:"\uD83D\uDC51\uD83C\uDF36️",description:"Data corruption errors"},8:{name:"Fraud",emoji:"\uD83D\uDC51\uD83C\uDFAD",description:"Security violations"},9:{name:"Treachery",emoji:"\uD83D\uDC51❄️",description:"System-breaking errors"}},a={1:{name:"Pride",emoji:"⚠️\uD83E\uDEA8",description:"Deprecated feature usage"},2:{name:"Envy",emoji:"⚠️\uD83D\uDC41️",description:"Performance concerns"},3:{name:"Wrath",emoji:"⚠️⚡",description:"Resource warnings"},4:{name:"Sloth",emoji:"⚠️\uD83D\uDC0C",description:"Slow operations"},5:{name:"Avarice",emoji:"⚠️\uD83D\uDC8E",description:"Excessive resource allocation"},6:{name:"Gluttony",emoji:"⚠️\uD83C\uDF7D️",description:"Memory leaks"},7:{name:"Lust",emoji:"⚠️\uD83D\uDD25",description:"Potential security issues"}},c={1:{name:"Moon",emoji:"\uD83D\uDE07\uD83C\uDF19",description:"Basic successful operations"},2:{name:"Mercury",emoji:"\uD83D\uDE07☿️",description:"Fast operations"},3:{name:"Venus",emoji:"\uD83D\uDE07\uD83D\uDC96",description:"User experience improvements"},4:{name:"Sun",emoji:"\uD83D\uDE07☀️",description:"Core functionality success"},5:{name:"Mars",emoji:"\uD83D\uDE07⚔️",description:"Security enhancements"},6:{name:"Jupiter",emoji:"\uD83D\uDE07⚡",description:"System-wide improvements"},7:{name:"Saturn",emoji:"\uD83D\uDE07\uD83E\uDE90",description:"Architectural achievements"},8:{name:"Fixed Stars",emoji:"\uD83D\uDE07✨",description:"Major version releases"},9:{name:"Primum Mobile",emoji:"\uD83D\uDE07\uD83C\uDF0C",description:"Transformative innovations"},10:{name:"Empyrean",emoji:"\uD83D\uDE07\uD83C\uDF08",description:"Perfect system harmony"}},l={...n};function m(e,r,t,n,o={}){let s=o[r];if(!s)throw Error(`Invalid ${e} level: ${r}`);let i="";if(l.formatting.includeTimestamp){let e=new Date().toISOString();i+=`[${e}] `}return(l.formatting.includeEmoji&&(i+=`${s.emoji} `),(l.formatting.includeRealmName||l.formatting.includeLevelNumber||l.formatting.includeCategoryName)&&(i+="[",l.formatting.includeRealmName&&(i+=`Dante:${e}`,l.formatting.includeLevelNumber&&(i+=":")),l.formatting.includeLevelNumber&&(i+=`${r}`,l.formatting.includeCategoryName&&(i+=":")),l.formatting.includeCategoryName&&(i+=`${s.name}`),i+="] "),"Inferno"===e&&1===r)?`${i}Kneel Before Zod! ${t}`:`${i}${t}`}function d(e,r){let t=e.toLowerCase();if(!l.enabledRealms[t]||!l.environments[o].enabled||!l.platforms[s].enabled)return!1;let n=l.environments[o].minimumLevels;return r>=(n&&void 0!==n[t]?n[t]:l.minimumLevels[t])}function u(e,r){if(!l.formatting.colorize||!l.platforms[s].colorize)return e;if("node"===s||"terminal"===s)switch(r){case"Inferno":return`\x1b[31m${e}\x1b[0m`;case"Purgatorio":return`\x1b[33m${e}\x1b[0m`;case"Paradiso":return`\x1b[32m${e}\x1b[0m`}return e}function h(e,r,t){if(!d("Inferno",e))return;let n=u(m("Inferno",e,r,t,i),"Inferno");l.handlers.onError&&l.handlers.onError(e,r,t),console.error(n),t&&console.error(t)}function p(e,r,t){if(!d("Purgatorio",e))return;let n=u(m("Purgatorio",e,r,t,a),"Purgatorio");l.handlers.onWarning&&l.handlers.onWarning(e,r,t),console.warn(n),t&&console.warn(t)}function g(e,r,t){if(!d("Paradiso",e))return;let n=u(m("Paradiso",e,r,t,c),"Paradiso");l.handlers.onSuccess&&l.handlers.onSuccess(e,r,t),console.log(n),t&&console.log(t)}let f={error:{validation:(e,r)=>h(1,e,r),dataFlow:(e,r)=>h(2,e,r),resources:(e,r)=>h(3,e,r),storage:(e,r)=>h(4,e,r),runtime:(e,r)=>h(5,e,r),config:(e,r)=>h(6,e,r),corruption:(e,r)=>h(7,e,r),security:(e,r)=>h(8,e,r),system:(e,r)=>h(9,e,r),circle:(e,r,t)=>h(e,r,t)},warn:{deprecated:(e,r)=>p(1,e,r),performance:(e,r)=>p(2,e,r),resources:(e,r)=>p(3,e,r),slow:(e,r)=>p(4,e,r),allocation:(e,r)=>p(5,e,r),memory:(e,r)=>p(6,e,r),security:(e,r)=>p(7,e,r),terrace:(e,r,t)=>p(e,r,t)},success:{basic:(e,r)=>g(1,e,r),performance:(e,r)=>g(2,e,r),ux:(e,r)=>g(3,e,r),core:(e,r)=>g(4,e,r),security:(e,r)=>g(5,e,r),system:(e,r)=>g(6,e,r),architecture:(e,r)=>g(7,e,r),release:(e,r)=>g(8,e,r),innovation:(e,r)=>g(9,e,r),perfection:(e,r)=>g(10,e,r),sphere:(e,r,t)=>g(e,r,t)},config:{get:()=>({...l}),set:e=>(l={...l,...e,enabledRealms:{...l.enabledRealms,...e.enabledRealms},minimumLevels:{...l.minimumLevels,...e.minimumLevels},formatting:{...l.formatting,...e.formatting},environments:{...l.environments,...e.environments},platforms:{...l.platforms,...e.platforms},handlers:{...l.handlers,...e.handlers}},f.config.get()),reset:()=>(l={...n},f.config.get()),forEnvironment:e=>(l.environments[e].enabled=!0,Object.keys(l.environments).forEach(r=>{r!==e&&(l.environments[r].enabled=!1)}),f.config.get()),forPlatform:e=>(l.platforms[e].enabled=!0,Object.keys(l.platforms).forEach(r=>{r!==e&&(l.platforms[r].enabled=!1)}),f.config.get()),enableRealm:(e,r)=>(l.enabledRealms[e]=r,f.config.get()),setMinLevel:(e,r)=>(l.minimumLevels[e]=r,f.config.get())},getInfernoCategory:e=>i[e],getPurgatorioCategory:e=>a[e],getParadisoCategory:e=>c[e],categories:{inferno:i,purgatorio:a,paradiso:c},environment:o,platform:s}},9475:(e,r,t)=>{"use strict";t.d(r,{Oq:()=>f,H6:()=>v});var n=t(9905),o=t(9021),s=t.n(o),i=t(3873),a=t.n(i),c=t(5511),l=t.n(c);class m{constructor(){this.CACHE_DURATION_MS=864e5,this.DEV_MODE=!1,this.cacheStorage=new Map,this.loadCacheFromStorage()}static getInstance(){return m.instance||(m.instance=new m),m.instance}generateCacheKey(e){return l().createHash("md5").update(e).digest("hex")}setItem(e,r){let t={data:r,timestamp:Date.now()};this.cacheStorage.set(e,t),this.saveCacheToStorage(),console.log(`🔵 [Cache] Stored item with key: ${e.substring(0,8)}...`)}getItem(e,r){let t=this.cacheStorage.get(e);if(!t)return console.log(`🟡 [Cache] Miss for key: ${e.substring(0,8)}...`),null;let n=Date.now()-t.timestamp;return n>(r||this.CACHE_DURATION_MS)?(console.log(`🟠 [Cache] Expired item for key: ${e.substring(0,8)}... (${Math.round(n/1e3/60)} minutes old)`),null):(console.log(`🟢 [Cache] Hit for key: ${e.substring(0,8)}... (${Math.round(n/1e3/60)} minutes old)`),t.data)}clearItem(e){this.cacheStorage.delete(e),this.saveCacheToStorage(),console.log(`🗑️ [Cache] Cleared item with key: ${e.substring(0,8)}...`)}clearAll(){this.cacheStorage.clear(),this.saveCacheToStorage(),console.log("\uD83E\uDDF9 [Cache] Cleared all cached items")}saveCacheToStorage(){}loadCacheFromStorage(){}cleanExpiredItems(){let e=Date.now(),r=0;this.cacheStorage.forEach((t,n)=>{e-t.timestamp>this.CACHE_DURATION_MS&&(this.cacheStorage.delete(n),r++)}),r>0&&(console.log(`🧹 [Cache] Cleaned up ${r} expired items`),this.saveCacheToStorage())}isDevelopmentMode(){return!1}}let d=m.getInstance();class u{constructor(){this.CACHE_DURATION_MS=864e5,this.DEV_MODE=!1,this.cacheStorage=new Map,this.loadCacheFromStorage()}static getInstance(){return u.instance||(u.instance=new u),u.instance}generateCacheKey(e){return l().createHash("md5").update(e).digest("hex")}setItem(e,r){let t={data:r,timestamp:Date.now()};this.cacheStorage.set(e,t),this.saveCacheToStorage(),console.log(`🔵 [StringCache] Stored item with key: ${e.substring(0,8)}...`)}getItem(e,r){let t=this.cacheStorage.get(e);if(!t)return console.log(`🟡 [StringCache] Miss for key: ${e.substring(0,8)}...`),null;let n=Date.now()-t.timestamp;return n>(r||this.CACHE_DURATION_MS)?(console.log(`🟠 [StringCache] Expired item for key: ${e.substring(0,8)}... (${Math.round(n/1e3/60)} minutes old)`),null):(console.log(`🟢 [StringCache] Hit for key: ${e.substring(0,8)}... (${Math.round(n/1e3/60)} minutes old)`),t.data)}clearItem(e){this.cacheStorage.delete(e),this.saveCacheToStorage(),console.log(`🗑️ [StringCache] Cleared item with key: ${e.substring(0,8)}...`)}clearAll(){this.cacheStorage.clear(),this.saveCacheToStorage(),console.log("\uD83E\uDDF9 [StringCache] Cleared all cached items")}saveCacheToStorage(){}loadCacheFromStorage(){}cleanExpiredItems(){let e=Date.now(),r=0;this.cacheStorage.forEach((t,n)=>{e-t.timestamp>this.CACHE_DURATION_MS&&(this.cacheStorage.delete(n),r++)}),r>0&&(console.log(`🧹 [StringCache] Cleaned up ${r} expired items`),this.saveCacheToStorage())}isDevelopmentMode(){return!1}}let h=u.getInstance();var p=t(5464);let g=new n.Ay({apiKey:process.env.OPENAI_API_KEY||"dummy-key-for-build-time"});async function f(e,r=!1){try{if(!process.env.OPENAI_API_KEY)return console.log("OpenAI API key is not available, returning mock data"),{summary:"I'm a senior software developer with a passion for blending cutting-edge technology with creative design. My journey spans over 15 years in full-stack development, UI/UX design, and creative technology. I've built my expertise in React, React Native, AWS, and various other technologies while working with companies like Daugherty Business Solutions, where I've helped transform complex business challenges into elegant digital solutions.",keySkills:["Full Stack Development","JavaScript/TypeScript","React/React Native","AWS","UI/UX Design","Creative Technology"],yearsOfExperience:"I've been in the industry for over 15 years, continuously learning and evolving with technology",educationLevel:"I hold dual Bachelor's degrees in Graphic Design and Philosophy from Webster University, which gives me both practical skills and a thoughtful approach to problem-solving",careerHighlights:["I've spent 9 years as a Senior Software Developer at Daugherty Business Solutions, where I've grown both technically and as a leader","I've had the privilege of working with major clients including Cox Communications, Bayer, Charter Communications, and Mastercard","My career path has allowed me to blend technical development with creative design, giving me a unique perspective on digital solutions"],industryExperience:["Business Solutions","Communications","Healthcare/Pharmaceutical","Financial Services"],recommendations:["I'm looking for opportunities that combine technical leadership with creative direction, where I can apply both my development expertise and design sensibilities","I thrive in cross-functional teams where I can bridge the gap between technical implementation and creative vision","My experience with enterprise clients has prepared me for complex business environments where thoughtful solutions make a real difference"]};let t=d.generateCacheKey(e);if(r)p.v.cache.invalidate(`Force refresh requested, skipping cache for key: ${t.substring(0,8)}...`);else{let e=d.getItem(t);if(e)return p.v.cache.hit(`Using cached OpenAI response for key: ${t.substring(0,8)}...`),e;p.v.cache.miss(`Cache miss for key: ${t.substring(0,8)}...`)}let n=`
      You are an expert resume analyzer with deep knowledge of the tech industry, particularly software development and design.

      Your task is to extract key information from the resume and provide a structured analysis that captures the essence of the candidate's experience, skills, and career trajectory.

      Your analysis should be written in first person, as if the resume owner is speaking directly to the reader.
      Use a conversational, natural tone following J.D. Salinger's writing style - authentic, direct, and slightly introspective.

      Focus on these aspects:
      1. Technical skills and expertise (programming languages, frameworks, tools)
      2. Creative abilities (design, UI/UX, illustration)
      3. Professional experience and accomplishments
      4. Educational background
      5. Industries worked in
      6. Career aspirations and strengths

      IMPORTANT: Your response must be a valid JSON object with EXACTLY these fields and no others:
      - summary: A string with a first-person summary that captures the essence of the candidate's professional identity (100-150 words)
      - keySkills: An array of strings listing 6-8 core technical and creative skills
      - yearsOfExperience: A string describing experience in first person, including total years and key roles
      - educationLevel: A string describing education in first person, including degrees and institutions
      - careerHighlights: An array of 3-4 strings with career highlights in first person, focusing on major accomplishments
      - industryExperience: An array of strings listing industries the candidate has worked in
      - recommendations: An array of 3 strings with career goals/recommendations in first person, reflecting the candidate's aspirations

      Do not include any additional fields or metadata in your response.
      Ensure all text is properly formatted and free of markdown or special characters.
    `,o=`
      Analyze this resume content and provide a structured analysis in JSON format.

      Pay special attention to:
      - The candidate's blend of technical and creative skills
      - Their experience with React, AWS, and enterprise applications
      - Their work across different industries (like Cox Communications, Bayer, etc.)
      - Their educational background in both design and philosophy
      - Their career progression and leadership roles

      Remember to write in first person as if the candidate is speaking, using J.D. Salinger's conversational style.
      Focus on creating a narrative that shows the candidate's unique blend of technical expertise and creative abilities.

      For the recommendations section, suggest career directions that would leverage both their technical and creative strengths.

      Resume content:
      ${e}
    `;p.v.openai.request(`Sending request to OpenAI for resume analysis (${e.length} chars)`);let s=Date.now(),i=await g.chat.completions.create({model:"gpt-4-turbo",messages:[{role:"system",content:n},{role:"user",content:o}],temperature:.4,response_format:{type:"json_object"},max_tokens:1500,top_p:.95,presence_penalty:.1,frequency_penalty:.1}),a=Date.now();p.v.openai.response(`Received response from OpenAI in ${a-s}ms`),i.usage&&p.v.openai.tokens(`Token usage: ${i.usage.prompt_tokens} prompt + ${i.usage.completion_tokens} completion = ${i.usage.total_tokens} total`);let c=i.choices[0]?.message?.content;if(!c)throw p.v.openai.error("No content in the OpenAI response"),Error("No content in the OpenAI response");console.log("Raw OpenAI response content:",c),p.v.summary.progress("Received raw content from OpenAI, parsing...");try{let e=JSON.parse(c);if(!e.summary||!e.keySkills||!e.yearsOfExperience)throw console.error("Invalid response structure:",e),Error("Invalid response structure from OpenAI");let r=[];return e.summary.length<50&&r.push("Summary too short"),e.keySkills.length<3&&r.push("Too few skills"),e.careerHighlights.length<2&&r.push("Too few career highlights"),e.recommendations.length<2&&r.push("Too few recommendations"),[/\bhe\b/i,/\bshe\b/i,/\bhis\b/i,/\bher\b/i,/\bthe candidate\b/i,/\bthe applicant\b/i,/\bthey have\b/i,/\bthey are\b/i].some(r=>r.test(e.summary)||r.test(e.yearsOfExperience)||r.test(e.educationLevel)||e.careerHighlights.some(e=>r.test(e))||e.recommendations.some(e=>r.test(e)))&&r.push("Contains third-person language"),r.length>0&&console.warn("Response validation issues:",r),console.log("Parsed analysis:",{summary:e.summary.substring(0,75)+"...",keySkills:`${e.keySkills.length} skills: ${e.keySkills.join(", ")}`,yearsOfExperience:e.yearsOfExperience.substring(0,50)+"...",educationLevel:e.educationLevel.substring(0,50)+"...",careerHighlights:`${e.careerHighlights.length} highlights`,industryExperience:e.industryExperience.join(", "),recommendations:`${e.recommendations.length} recommendations`}),d.setItem(t,e),p.v.cache.update(`Stored item with key: ${t.substring(0,8)}...`),p.v.summary.complete("Successfully generated and parsed summary"),e}catch(e){throw console.error("Error parsing OpenAI response:",e),console.error("Raw content that failed to parse:",c),p.v.openai.error(`Failed to parse OpenAI response: ${e.message||"Unknown error"}`),p.v.summary.error(`JSON parsing error: ${e.message}`),Error(`Failed to parse OpenAI response: ${e.message||"Unknown error"}`)}}catch(e){throw console.error("Error analyzing resume with OpenAI:",e),p.v.openai.error(`Error analyzing resume with OpenAI: ${e instanceof Error?e.message:String(e)}`),p.v.summary.error(`Analysis failed: ${e instanceof Error?e.message:String(e)}`),e}}async function y(e){let r=new TextEncoder().encode(e);return Array.from(new Uint8Array(await crypto.subtle.digest("SHA-256",r))).map(e=>e.toString(16).padStart(2,"0")).join("")}async function v(e,r=!1){try{let t=await y(e),n=`summary_format_${t}`;if(r)p.v.cache.invalidate(`Force refresh requested, skipping cache for formatted summary key: ${n.substring(0,8)}...`);else{let e=h.getItem(n);if(e)return p.v.cache.hit(`Using cached formatted summary for key: ${n.substring(0,8)}...`),e;p.v.cache.miss(`Cache miss for formatted summary key: ${n.substring(0,8)}...`)}let o=a().join(process.cwd(),"prompts/summary_format_prompt.txt"),i="";try{i=s().existsSync(o)?s().readFileSync(o,"utf8"):`Format the following resume content into a well-structured markdown document following these guidelines:

1. Use a first-person narrative style throughout
2. Create clear section headers with ## for main sections
3. Use bullet points for lists of skills, experiences, etc.
4. Maintain the personal tone and professional focus
5. Organize content into these sections in this order:
   - Professional Summary (introduction paragraph)
   - Key Skills (bullet list)
   - Experience (brief overview with years)
   - Education (brief description)
   - Career Highlights (bullet list)
   - Industry Experience (bullet list)
   - Recommendations (what I'm looking for - bullet list)

Here's the raw content to format:

{content}

Format the content as a complete markdown document with the title "# P. Brady Georgen - Summary" at the top. Ensure all sections are properly formatted with appropriate headers, bullet points, and paragraph breaks.`}catch(e){throw p.v.ai.error(`Error reading prompt template: ${e}`),Error(`Failed to read prompt template: ${e}`)}let c=i.includes("{content}")?i.replace("{content}",e):i;p.v.openai.request("Sending request to OpenAI for summary formatting");let l=Date.now(),m=await g.chat.completions.create({model:"gpt-4-turbo",messages:[{role:"system",content:'You are a professional cover letter writer that creates well-structured, compelling cover letters in markdown format. You follow the Salinger philosophy of writing: direct, personal, and authentic. Your cover letters are concise, focused, and highlight the unique value proposition of the candidate. You MUST create content that fits on a SINGLE 8.5x11" page when converted to PDF. This means being extremely concise and prioritizing only the most important information. Follow the instructions exactly and only return the formatted markdown.'},{role:"user",content:c}],temperature:.4,max_tokens:1200}),d=Date.now();p.v.openai.response(`Received response from OpenAI in ${d-l}ms`),m.usage&&p.v.openai.tokens(`Token usage: ${m.usage.prompt_tokens} prompt + ${m.usage.completion_tokens} completion = ${m.usage.total_tokens} total`);let u=m.choices[0]?.message?.content;if(!u)throw p.v.openai.error("No content in the OpenAI response"),Error("No content in the OpenAI response");return h.setItem(n,u),p.v.cache.update(`Stored formatted summary with key: ${n.substring(0,8)}...`),p.v.summary.complete("Successfully formatted summary"),u}catch(e){throw p.v.openai.error(`Error formatting summary with OpenAI: ${e instanceof Error?e.message:String(e)}`),p.v.summary.error(`Formatting failed: ${e instanceof Error?e.message:String(e)}`),e}}}};